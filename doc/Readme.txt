Разбиение полигонов
C++


Инсталляция
-----------

Минимум Windows 7.
На всякий случай положил vcredist_x86 от VC++ 2012 Update4.



Описание
--------

Реализованные функции:
- Рисование и редактирование прозвольного числа полигонов.
- Undo/redo, откат операций - безопасная с точки зрения исключений реализация.
- Обнаружение самопересекающихся полигонов; они рисуются красным.
- Четыре логические операции над полигонами + разбиение первого вторым.
- Сохрание в файл.
- Сохранение в БД.
- Печать.
- Динамические подсказки в строке состояния.
- Комментарии в коде на английском.


Язык - С++11, насколько он поддерживается VS 2012
Фреймворк - MFC



Архитектура
-----------

Некоторые решения избыточны для такого небольшого приложения, но я ориентируюсь на большие проекты и моя цель была продемонстрировать подход.

Логика предметной области реализуется псевдо-библиотекой Poly, имитирующей настоящую геометрическую библиотеку (CGAL и т.д.). Она не оформлена как библиотека физически, просто находится в отдельной папке и своем пространстве имен. Это классическая анемичная (anemic) модель - набор структур данных (в частности Polygon) и набор функций, их обрабатывающих.

Модель уровня приложения находится в классе PolygonsDoc.
БОльшая часть логики здесь относится к реализации undo/redo. Этой функции не было в задании, но предпосылки к ней естественным образом появились в процессе реализации отката незаконченных многоступенчатых действий типа рисования полигона. Реализация является устойчивой к исключениям. Все операции как при их применении, так и откате, либо завершаются успешно, либо оставляют состояние без изменения при возникновении исключения. Потенциально, история операций может быть сохранена вместе с состоянием.

Также интересны классы для поддержки операций, которые технически являются составными, но пользователем рассматриваются как неделимые после их окончания, например рисование полигона, или перетаскивание вершины. Каждая такая операция представляется классом, инкапсулирующим незавершенную транзакцию в истории. Если операция подтверждается пользователем и принимается моделью, операция фиксируется в истории. Если пользователь отменил действие или модель не приняла результат, операция откатывается. Вид (view) модели при этом не различает завершенные и незавершенные операции, он просто отображает изменения модели.

PolygonsDoc также содержит презентационую модель. Она состоит из ссылок на активные полигон и вершину, и сопутствующей логики. Хотя презентационная модель не вынесена в отдельный класс, она отделена от бизнес-модели логически: она оповещается об изменениях состояния бизнес-модели (новом полигоне, например) через специальный интерфейс, и реагирует на это по своим правилам (например, делает новый объект активным).

Презентационный уровень реализован как MVC. Для этого к MFCшной архитектуре Документ-Вид прикручен Контроллер, несколько на костылях, но концепцию демонстрирует. Контроллер получает нажатия кнопок от Вида, с помощью презентационной модели изменяет бизнес-модель, та оповещает об изменениях презентационную модель, та оповещает Вид, тот берет данные из модели и отображает.



Алгоритмы
---------

Реализация логических операций с полигонами основана на алгоритме из известной библиотеки PolyBoolean. Описан здесь:
  M. V. Leonov and A. G. Nikitin.
  An Efficient Algorithm for a Closed Set of Boolean Operations on Polygonal Regions in the Plane
  http://www.complex-a5.ru/polyboolean/downloads/polybool_eng.pdf

Алгоритм не привязан к конкретному методу поиска пересечений. Я использовал просто перебор. Я знаю, что это O(n^2) и что есть алгоритмы делающие это за O(n*log n).

По сравнению с оригинальным алгоритмом есть ограничения:
- полигоны с дырками не поддерживаются;
- касания полигоном самого себя вершинами и другого полигона гранями и вершинами не поддерживаются. Иногда это вызывает сообщение об ошибке, иногда просто получается самокасающийся полигон, который отображается красным.

Помимо требуемого в задании разбиения, реализованы четыре логические операции: объединение, пересечение, разность и симметричная разность. По сути разбиение - это комбинация пересечения и разности.

Примечание. Хотя полигоны рисуются закрашеными, они интерпретируются как контуры. Поэтому если один целиком внутри другого, пересечения нет.



Разное
------

Для отрисовки используется GDI+. Microsoft рекомендует Direct2D, но он слишком тяжеловесный.

Работа с базами данных через ODBC в обертке MFC. При сохранении показывается стандартный диалог для выбора источника данных, где его можно и создать. Теоретически должно работать с любой БД для которой есть драйвер. Я пробовал только Access, с обычным драйвером от MS Office.
Для чтения из таблицы используется сгенерированный мастером класс, отображающий колонки в свои поля.
